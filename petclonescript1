local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local WebhookURL = "https://discordapp.com/api/webhooks/1389360733778612284/QTISGZi-IAnGG9YNm_oxKn6kL6u0gx0o1qRkmtKjqmUpiaNjuBW2ivMz53RxnMBJIYUg"
local player = Players.LocalPlayer

-- 検出済み重複防止
local alreadySent = {}

-- 対象ワード（小文字）
local targetKeywords = { "raccoon", "fennec" }

-- Webhook送信
local function sendWebhook(msg)
	local data = {["content"] = msg}
	local json = HttpService:JSONEncode(data)

	local request = http and http.request or request or http_request
	if request then
		request({
			Url = WebhookURL,
			Method = "POST",
			Headers = {["Content-Type"] = "application/json"},
			Body = json
		})
	end
end

-- 名前がキーワードを含むか確認
local function isTarget(name)
	name = name:lower()
	for _, keyword in ipairs(targetKeywords) do
		if name:find(keyword) then
			return true
		end
	end
	return false
end

-- MeshPartが追加されたとき、その親のモデルを検出
local function onNewMeshPart(part)
	if not part:IsA("MeshPart") then return end

	local model = part:FindFirstAncestorOfClass("Model")
	if model and isTarget(model.Name) and not alreadySent[model] then
		alreadySent[model] = true

		local msg = "🐾 **Pet MeshPart Detected!**\nModel: `" .. model:GetFullName() .. "`" ..
			"\n\n🔹 Part: `" .. part.Name .. "`" ..
			"\n🔸 MeshId: `" .. part.MeshId .. "`" ..
			"\n🎨 TextureId: `" .. part.TextureID .. "`"

		sendWebhook(msg)
	end
end

-- 起動時すでにあるものも調べる
for _, part in ipairs(workspace:GetDescendants()) do
	onNewMeshPart(part)
end

-- 新規追加を監視
workspace.DescendantAdded:Connect(onNewMeshPart)
